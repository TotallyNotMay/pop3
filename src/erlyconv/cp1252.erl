%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MICSFT/WINDOWS/CP1252.TXT AT 2016-08-19
-module(cp1252).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#20AC;
to_unicode(16#82) -> 16#201A;
to_unicode(16#83) -> 16#0192;
to_unicode(16#84) -> 16#201E;
to_unicode(16#85) -> 16#2026;
to_unicode(16#86) -> 16#2020;
to_unicode(16#87) -> 16#2021;
to_unicode(16#88) -> 16#02C6;
to_unicode(16#89) -> 16#2030;
to_unicode(16#8A) -> 16#0160;
to_unicode(16#8B) -> 16#2039;
to_unicode(16#8C) -> 16#0152;
to_unicode(16#8E) -> 16#017D;
to_unicode(16#91) -> 16#2018;
to_unicode(16#92) -> 16#2019;
to_unicode(16#93) -> 16#201C;
to_unicode(16#94) -> 16#201D;
to_unicode(16#95) -> 16#2022;
to_unicode(16#96) -> 16#2013;
to_unicode(16#97) -> 16#2014;
to_unicode(16#98) -> 16#02DC;
to_unicode(16#99) -> 16#2122;
to_unicode(16#9A) -> 16#0161;
to_unicode(16#9B) -> 16#203A;
to_unicode(16#9C) -> 16#0153;
to_unicode(16#9E) -> 16#017E;
to_unicode(16#9F) -> 16#0178;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#20AC) -> 16#80;
from_unicode(16#201A) -> 16#82;
from_unicode(16#0192) -> 16#83;
from_unicode(16#201E) -> 16#84;
from_unicode(16#2026) -> 16#85;
from_unicode(16#2020) -> 16#86;
from_unicode(16#2021) -> 16#87;
from_unicode(16#02C6) -> 16#88;
from_unicode(16#2030) -> 16#89;
from_unicode(16#0160) -> 16#8A;
from_unicode(16#2039) -> 16#8B;
from_unicode(16#0152) -> 16#8C;
from_unicode(16#017D) -> 16#8E;
from_unicode(16#2018) -> 16#91;
from_unicode(16#2019) -> 16#92;
from_unicode(16#201C) -> 16#93;
from_unicode(16#201D) -> 16#94;
from_unicode(16#2022) -> 16#95;
from_unicode(16#2013) -> 16#96;
from_unicode(16#2014) -> 16#97;
from_unicode(16#02DC) -> 16#98;
from_unicode(16#2122) -> 16#99;
from_unicode(16#0161) -> 16#9A;
from_unicode(16#203A) -> 16#9B;
from_unicode(16#0153) -> 16#9C;
from_unicode(16#017E) -> 16#9E;
from_unicode(16#0178) -> 16#9F;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
