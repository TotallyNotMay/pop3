%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MISC/KOI8-R.TXT AT 2016-08-19
-module(koi8r).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#2500;
to_unicode(16#81) -> 16#2502;
to_unicode(16#82) -> 16#250C;
to_unicode(16#83) -> 16#2510;
to_unicode(16#84) -> 16#2514;
to_unicode(16#85) -> 16#2518;
to_unicode(16#86) -> 16#251C;
to_unicode(16#87) -> 16#2524;
to_unicode(16#88) -> 16#252C;
to_unicode(16#89) -> 16#2534;
to_unicode(16#8A) -> 16#253C;
to_unicode(16#8B) -> 16#2580;
to_unicode(16#8C) -> 16#2584;
to_unicode(16#8D) -> 16#2588;
to_unicode(16#8E) -> 16#258C;
to_unicode(16#8F) -> 16#2590;
to_unicode(16#90) -> 16#2591;
to_unicode(16#91) -> 16#2592;
to_unicode(16#92) -> 16#2593;
to_unicode(16#93) -> 16#2320;
to_unicode(16#94) -> 16#25A0;
to_unicode(16#95) -> 16#2219;
to_unicode(16#96) -> 16#221A;
to_unicode(16#97) -> 16#2248;
to_unicode(16#98) -> 16#2264;
to_unicode(16#99) -> 16#2265;
to_unicode(16#9A) -> 16#00A0;
to_unicode(16#9B) -> 16#2321;
to_unicode(16#9C) -> 16#00B0;
to_unicode(16#9D) -> 16#00B2;
to_unicode(16#9E) -> 16#00B7;
to_unicode(16#9F) -> 16#00F7;
to_unicode(16#A0) -> 16#2550;
to_unicode(16#A1) -> 16#2551;
to_unicode(16#A2) -> 16#2552;
to_unicode(16#A3) -> 16#0451;
to_unicode(16#A4) -> 16#2553;
to_unicode(16#A5) -> 16#2554;
to_unicode(16#A6) -> 16#2555;
to_unicode(16#A7) -> 16#2556;
to_unicode(16#A8) -> 16#2557;
to_unicode(16#A9) -> 16#2558;
to_unicode(16#AA) -> 16#2559;
to_unicode(16#AB) -> 16#255A;
to_unicode(16#AC) -> 16#255B;
to_unicode(16#AD) -> 16#255C;
to_unicode(16#AE) -> 16#255D;
to_unicode(16#AF) -> 16#255E;
to_unicode(16#B0) -> 16#255F;
to_unicode(16#B1) -> 16#2560;
to_unicode(16#B2) -> 16#2561;
to_unicode(16#B3) -> 16#0401;
to_unicode(16#B4) -> 16#2562;
to_unicode(16#B5) -> 16#2563;
to_unicode(16#B6) -> 16#2564;
to_unicode(16#B7) -> 16#2565;
to_unicode(16#B8) -> 16#2566;
to_unicode(16#B9) -> 16#2567;
to_unicode(16#BA) -> 16#2568;
to_unicode(16#BB) -> 16#2569;
to_unicode(16#BC) -> 16#256A;
to_unicode(16#BD) -> 16#256B;
to_unicode(16#BE) -> 16#256C;
to_unicode(16#BF) -> 16#00A9;
to_unicode(16#C0) -> 16#044E;
to_unicode(16#C1) -> 16#0430;
to_unicode(16#C2) -> 16#0431;
to_unicode(16#C3) -> 16#0446;
to_unicode(16#C4) -> 16#0434;
to_unicode(16#C5) -> 16#0435;
to_unicode(16#C6) -> 16#0444;
to_unicode(16#C7) -> 16#0433;
to_unicode(16#C8) -> 16#0445;
to_unicode(16#C9) -> 16#0438;
to_unicode(16#CA) -> 16#0439;
to_unicode(16#CB) -> 16#043A;
to_unicode(16#CC) -> 16#043B;
to_unicode(16#CD) -> 16#043C;
to_unicode(16#CE) -> 16#043D;
to_unicode(16#CF) -> 16#043E;
to_unicode(16#D0) -> 16#043F;
to_unicode(16#D1) -> 16#044F;
to_unicode(16#D2) -> 16#0440;
to_unicode(16#D3) -> 16#0441;
to_unicode(16#D4) -> 16#0442;
to_unicode(16#D5) -> 16#0443;
to_unicode(16#D6) -> 16#0436;
to_unicode(16#D7) -> 16#0432;
to_unicode(16#D8) -> 16#044C;
to_unicode(16#D9) -> 16#044B;
to_unicode(16#DA) -> 16#0437;
to_unicode(16#DB) -> 16#0448;
to_unicode(16#DC) -> 16#044D;
to_unicode(16#DD) -> 16#0449;
to_unicode(16#DE) -> 16#0447;
to_unicode(16#DF) -> 16#044A;
to_unicode(16#E0) -> 16#042E;
to_unicode(16#E1) -> 16#0410;
to_unicode(16#E2) -> 16#0411;
to_unicode(16#E3) -> 16#0426;
to_unicode(16#E4) -> 16#0414;
to_unicode(16#E5) -> 16#0415;
to_unicode(16#E6) -> 16#0424;
to_unicode(16#E7) -> 16#0413;
to_unicode(16#E8) -> 16#0425;
to_unicode(16#E9) -> 16#0418;
to_unicode(16#EA) -> 16#0419;
to_unicode(16#EB) -> 16#041A;
to_unicode(16#EC) -> 16#041B;
to_unicode(16#ED) -> 16#041C;
to_unicode(16#EE) -> 16#041D;
to_unicode(16#EF) -> 16#041E;
to_unicode(16#F0) -> 16#041F;
to_unicode(16#F1) -> 16#042F;
to_unicode(16#F2) -> 16#0420;
to_unicode(16#F3) -> 16#0421;
to_unicode(16#F4) -> 16#0422;
to_unicode(16#F5) -> 16#0423;
to_unicode(16#F6) -> 16#0416;
to_unicode(16#F7) -> 16#0412;
to_unicode(16#F8) -> 16#042C;
to_unicode(16#F9) -> 16#042B;
to_unicode(16#FA) -> 16#0417;
to_unicode(16#FB) -> 16#0428;
to_unicode(16#FC) -> 16#042D;
to_unicode(16#FD) -> 16#0429;
to_unicode(16#FE) -> 16#0427;
to_unicode(16#FF) -> 16#042A;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#2500) -> 16#80;
from_unicode(16#2502) -> 16#81;
from_unicode(16#250C) -> 16#82;
from_unicode(16#2510) -> 16#83;
from_unicode(16#2514) -> 16#84;
from_unicode(16#2518) -> 16#85;
from_unicode(16#251C) -> 16#86;
from_unicode(16#2524) -> 16#87;
from_unicode(16#252C) -> 16#88;
from_unicode(16#2534) -> 16#89;
from_unicode(16#253C) -> 16#8A;
from_unicode(16#2580) -> 16#8B;
from_unicode(16#2584) -> 16#8C;
from_unicode(16#2588) -> 16#8D;
from_unicode(16#258C) -> 16#8E;
from_unicode(16#2590) -> 16#8F;
from_unicode(16#2591) -> 16#90;
from_unicode(16#2592) -> 16#91;
from_unicode(16#2593) -> 16#92;
from_unicode(16#2320) -> 16#93;
from_unicode(16#25A0) -> 16#94;
from_unicode(16#2219) -> 16#95;
from_unicode(16#221A) -> 16#96;
from_unicode(16#2248) -> 16#97;
from_unicode(16#2264) -> 16#98;
from_unicode(16#2265) -> 16#99;
from_unicode(16#00A0) -> 16#9A;
from_unicode(16#2321) -> 16#9B;
from_unicode(16#00B0) -> 16#9C;
from_unicode(16#00B2) -> 16#9D;
from_unicode(16#00B7) -> 16#9E;
from_unicode(16#00F7) -> 16#9F;
from_unicode(16#2550) -> 16#A0;
from_unicode(16#2551) -> 16#A1;
from_unicode(16#2552) -> 16#A2;
from_unicode(16#0451) -> 16#A3;
from_unicode(16#2553) -> 16#A4;
from_unicode(16#2554) -> 16#A5;
from_unicode(16#2555) -> 16#A6;
from_unicode(16#2556) -> 16#A7;
from_unicode(16#2557) -> 16#A8;
from_unicode(16#2558) -> 16#A9;
from_unicode(16#2559) -> 16#AA;
from_unicode(16#255A) -> 16#AB;
from_unicode(16#255B) -> 16#AC;
from_unicode(16#255C) -> 16#AD;
from_unicode(16#255D) -> 16#AE;
from_unicode(16#255E) -> 16#AF;
from_unicode(16#255F) -> 16#B0;
from_unicode(16#2560) -> 16#B1;
from_unicode(16#2561) -> 16#B2;
from_unicode(16#0401) -> 16#B3;
from_unicode(16#2562) -> 16#B4;
from_unicode(16#2563) -> 16#B5;
from_unicode(16#2564) -> 16#B6;
from_unicode(16#2565) -> 16#B7;
from_unicode(16#2566) -> 16#B8;
from_unicode(16#2567) -> 16#B9;
from_unicode(16#2568) -> 16#BA;
from_unicode(16#2569) -> 16#BB;
from_unicode(16#256A) -> 16#BC;
from_unicode(16#256B) -> 16#BD;
from_unicode(16#256C) -> 16#BE;
from_unicode(16#00A9) -> 16#BF;
from_unicode(16#044E) -> 16#C0;
from_unicode(16#0430) -> 16#C1;
from_unicode(16#0431) -> 16#C2;
from_unicode(16#0446) -> 16#C3;
from_unicode(16#0434) -> 16#C4;
from_unicode(16#0435) -> 16#C5;
from_unicode(16#0444) -> 16#C6;
from_unicode(16#0433) -> 16#C7;
from_unicode(16#0445) -> 16#C8;
from_unicode(16#0438) -> 16#C9;
from_unicode(16#0439) -> 16#CA;
from_unicode(16#043A) -> 16#CB;
from_unicode(16#043B) -> 16#CC;
from_unicode(16#043C) -> 16#CD;
from_unicode(16#043D) -> 16#CE;
from_unicode(16#043E) -> 16#CF;
from_unicode(16#043F) -> 16#D0;
from_unicode(16#044F) -> 16#D1;
from_unicode(16#0440) -> 16#D2;
from_unicode(16#0441) -> 16#D3;
from_unicode(16#0442) -> 16#D4;
from_unicode(16#0443) -> 16#D5;
from_unicode(16#0436) -> 16#D6;
from_unicode(16#0432) -> 16#D7;
from_unicode(16#044C) -> 16#D8;
from_unicode(16#044B) -> 16#D9;
from_unicode(16#0437) -> 16#DA;
from_unicode(16#0448) -> 16#DB;
from_unicode(16#044D) -> 16#DC;
from_unicode(16#0449) -> 16#DD;
from_unicode(16#0447) -> 16#DE;
from_unicode(16#044A) -> 16#DF;
from_unicode(16#042E) -> 16#E0;
from_unicode(16#0410) -> 16#E1;
from_unicode(16#0411) -> 16#E2;
from_unicode(16#0426) -> 16#E3;
from_unicode(16#0414) -> 16#E4;
from_unicode(16#0415) -> 16#E5;
from_unicode(16#0424) -> 16#E6;
from_unicode(16#0413) -> 16#E7;
from_unicode(16#0425) -> 16#E8;
from_unicode(16#0418) -> 16#E9;
from_unicode(16#0419) -> 16#EA;
from_unicode(16#041A) -> 16#EB;
from_unicode(16#041B) -> 16#EC;
from_unicode(16#041C) -> 16#ED;
from_unicode(16#041D) -> 16#EE;
from_unicode(16#041E) -> 16#EF;
from_unicode(16#041F) -> 16#F0;
from_unicode(16#042F) -> 16#F1;
from_unicode(16#0420) -> 16#F2;
from_unicode(16#0421) -> 16#F3;
from_unicode(16#0422) -> 16#F4;
from_unicode(16#0423) -> 16#F5;
from_unicode(16#0416) -> 16#F6;
from_unicode(16#0412) -> 16#F7;
from_unicode(16#042C) -> 16#F8;
from_unicode(16#042B) -> 16#F9;
from_unicode(16#0417) -> 16#FA;
from_unicode(16#0428) -> 16#FB;
from_unicode(16#042D) -> 16#FC;
from_unicode(16#0429) -> 16#FD;
from_unicode(16#0427) -> 16#FE;
from_unicode(16#042A) -> 16#FF;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
